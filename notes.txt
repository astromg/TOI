

# text
# rgb(150,0,0)       red
# rgb(0,150,0)       green
# rgb(217, 239, 217) light green
# rgb(255, 160, 0)   orange
# rgb(0,0,0)         black

# background
# rgb(136, 142, 228)     blue
# rgb(234, 245, 249)     light blue
# rgb(240, 232, 151)     light yellow
# rgb(255, 165, 0)       orange
# rgb(233, 233, 233)     grey


# "\U0001F7E2" green circle
# "\U0001F7E1" yellow circle
# "\U0001F534" red circle

# "\u23F0"  budzik
# "\u23F1"  stoper

"background-color: rgb(136, 142, 228); color: black;" - moving blue
"background-color: rgb(233, 233, 233); color: black;" - grey
"background-color: rgb(255, 255, 255); color: black;"



# ######## OB ##############################
          # ob["name","block","type","ra","dec","seq","comment"]
          # ob["wait","wait_ut","wait_sunset","wait_sunrise"]
          # [meta_alt,meta_az,meta_plan_ut,meta_plan_alt,meta_plan_az,skip]

# ######### PLAN ###############################
          self.plan=[]              # lista OB
          self.i=0                  # aktualne podswietlenie
          self.prev_i=1             # poprzednie podswietlenie
          self.next_i=0             # zmienna funkcjonalna, nastepny obiekt do obserwacji
          self.current_i=-1         # zmienna funckjonalna, ktore ob wlasnie sie wykonuje.
          self.done=[]              # lista uuid wykonanych ob


# ######### MQTT #######################

        # MQTT
        # try:
        #     self.mqtt_client = mqtt.Client()
        #     self.mqtt_broker = 'docker.oca.lan'
        #     self.mqtt_port = 1883
        #     self.mqtt_topic_weather = 'weather'
        #     self.mqtt_client.connect(self.mqtt_broker, self.mqtt_port)
        #     self.mqtt_client.message_callback_add(self.mqtt_topic_weather, self.on_weather_message)
        #     self.mqtt_client.on_connect = self.on_mqtt_connect
        #     self.mqtt_client.loop_start()
         # except Exception as e: pass

    # def on_mqtt_connect(self, client, userdata, flags, rc):
    #     if rc == 0: self.mqtt_client.subscribe((self.mqtt_topic_weather, 1))


    # def on_weather_message(self, client, userdata, message):
    #     weather = message.payload.decode('utf-8')
    #     weather_dict = json.loads(weather)
    #     self.telemetry_temp = weather_dict["temp"]
    #     self.telemetry_wind = weather_dict["wind"]
    #     self.auxGui.welcome_tab.wind_e.setText(f"{self.telemetry_wind} [km/h]")


# ######### AUTOFLAT ########################


        --------  19: 31 - -------  manual - -------
        {'id': 'manual', 'name': 'Night plan', 'started': True, 'done': False, 'skipped': False,
         'timestamp_utc': '2023-08-14 19:31:56.093583', 'c_type': 'night_plan'}

    --------  19: 31 - -------  00 - -------
    {'id': '00', 'name': 'Sequence', 'started': True, 'done': False, 'skipped': False,
     'timestamp_utc': '2023-08-14 19:31:56.093672', 'c_type': 'sequence'}


--------  19: 31 - -------  00_00 - -------
{'seq': '5/Ic/a', 'id': '00_00', 'name': 'SKYFLAT', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:31:56.370572', 'c_type': 'command'}

--------  19: 31 - -------  00_00_00 - -------
{'follow_tol': 2.0, 'uobi': 0, 'id': '00_00_00', 'name': 'dome-slew', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:31:56.370837', 'c_type': 'subcommand'}

--------  19: 31 - -------  00_00_00 - -------
{'follow_tol': 2.0, 'uobi': 0, 'id': '00_00_00', 'name': 'dome-slew', 'started': True, 'done': False, 'skipped': True,
 'timestamp_utc': '2023-08-14 19:31:56.382716', 'c_type': 'subcommand'}

--------  19: 31 - -------  00_00_01 - -------
{'filter': 'Ic', 'uobi': 0, 'id': '00_00_01', 'name': 'change-filter', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:31:56.382796', 'c_type': 'subcommand'}

--------  19: 31 - -------  00_00_01 - -------
{'filter': 'Ic', 'uobi': 0, 'id': '00_00_01', 'name': 'change-filter', 'started': True, 'done': False, 'skipped': True,
 'timestamp_utc': '2023-08-14 19:31:56.393425', 'c_type': 'subcommand'}

--------  19: 31 - -------  00_00_02 - -------
{'sub_exp': 1, 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None,
 'req_dec': None, 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0,
 'id': '00_00_02', 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:31:56.393700', 'c_type': 'subcommand'}

--------  19: 31 - -------  00_00_02 - -------
{'auto_exp_start': True, 'auto_exp_finnished': False, 'auto_exp_sub_no': 1, 'auto_exp_time': 1.0, 'sub_exp': 1,
 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None, 'req_dec': None,
 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02',
 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:31:56.393851', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'auto_exp_start': True, 'auto_exp_finnished': True, 'auto_exp_sub_no': 1, 'auto_exp_time': 1.0, 'sub_exp': 1,
 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None, 'req_dec': None,
 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02',
 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:32:12.511586', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'test_exp_mean': 168.39999999999998, 'sub_exp': 1, 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True,
 'obj_name': 'test', 'req_ra': None, 'req_dec': None, 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633,
 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02', 'name': 'camera-exposure', 'started': True,
 'done': False, 'skipped': False, 'timestamp_utc': '2023-08-14 19:32:12.511783', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'auto_exp_start': True, 'auto_exp_finnished': False, 'auto_exp_sub_no': 2, 'auto_exp_time': 1.0, 'sub_exp': 1,
 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None, 'req_dec': None,
 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02',
 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:32:12.513083', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'auto_exp_start': True, 'auto_exp_finnished': True, 'auto_exp_sub_no': 2, 'auto_exp_time': 1.0, 'sub_exp': 1,
 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None, 'req_dec': None,
 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02',
 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:32:29.501207', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'test_exp_mean': 165.89, 'sub_exp': 1, 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True,
 'obj_name': 'test', 'req_ra': None, 'req_dec': None, 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633,
 'auto_exposure': True, 'observer': '', 'uobi': 0, 'id': '00_00_02', 'name': 'camera-exposure', 'started': True,
 'done': False, 'skipped': False, 'timestamp_utc': '2023-08-14 19:32:29.501368', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00_02 - -------
{'sub_exp': 1, 'exp_time': None, 'exp_no': 5, 'type': 'flat', 'light': True, 'obj_name': 'test', 'req_ra': None,
 'req_dec': None, 'epoch': '2000', 'filter': 'Ic', 'focus_id': 32633, 'auto_exposure': True, 'observer': '', 'uobi': 0,
 'id': '00_00_02', 'name': 'camera-exposure', 'started': True, 'done': False, 'skipped': True,
 'timestamp_utc': '2023-08-14 19:32:29.501439', 'c_type': 'subcommand'}

--------  19: 32 - -------  00_00 - -------
{'seq': '5/Ic/a', 'id': '00_00', 'name': 'SKYFLAT', 'started': True, 'done': False, 'skipped': True,
 'timestamp_utc': '2023-08-14 19:32:29.501467', 'c_type': 'command'}

--------  19: 32 - -------  00 - -------
{'id': '00', 'name': 'Sequence', 'started': True, 'done': True, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:32:29.737638', 'c_type': 'sequence'}

--------  19: 32 - -------  manual - -------
{'id': 'manual', 'name': 'Night plan', 'started': True, 'done': True, 'skipped': False,
 'timestamp_utc': '2023-08-14 19:32:29.737786', 'c_type': 'night_plan'}














quest="http://172.23.33.21:11111/api/v1/telescope/0/park"
r=requests.put(quest)
print(r.text)



quest="http://172.23.68.211:11111/api/v1/telescope/0/connected"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/canpark"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/tracking"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/declination"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/azimuth"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/altitude"
r=requests.get(quest)
print(r.text)

quest="http://172.23.68.211:11111/api/v1/telescope/0/slewing"
r=requests.get(quest)
print(r.text)

['forcenextpierside', 'telescope:clearerror', 'telescope:errorstring', 'telescope:opencover', 'telescope:closecover', 'telescope:closecover', 'telescope:coverstatus', 'telescope:motoron', 'telescope:motoroff', 'motstat', 'telescope:horizonlimit', 'telescope:reportmounttype', 'telescope:reportminalt', 'telescope:reportmaxalt', 'telescope:reportmindec', 'telescope:reportmaxdec', 'telescope:reportcablezero', 'telescope:startfans', 'telescope:stopfans', 'telescope:updatepolaraxisaz', 'telescope:updatepolaraxisal', 'telescope:setnewconfig', 'telescope:altazunwind', 'trackposition', 'sat:startalt', 'sat:name', 'sat:delay', 'sat:line1', 'sat:line2', 'sat:start']



self.ob[tel] = {"run":False,"done":False,"uobi":None,"origin":None}

            +
            start_time
            type
            name
            block
            slot_time
            seq
            ra
            dec
            wait
            wait_ut
            wait_sunrise
            wait_sunset



self.ob_started
self.ob_done
self.ob_start_time
self.ob_expected_time
self.ob_program





self.parent.mnt_trac
self.parent.mnt_park
self.parent.mnt_slewing







# Telescope Controler
tel.monitor.control = [oca_controler1,rc_paposo]

# Telescope Monitor

tel.mnt.ra
tel.mnt.dec
tel.mnt.h
tel.mnt.a
tel.mnt.z ??
tel.mnt.status = [slewing,tracking,ready]
tel.mnt.focuser 
tel.mnt.status = [moving,ready]
tel.mnt.M3

tel.dome.a
tel.dome.status = [tracking,slewing,ready]
tel.dome.shutter = [open,close,moving]

tel.perypheries.lights = [on,off]
tel.perypheries.fan = [on,off]
tel.perypheries.blinds = [on,off]

tel.perypheries.domefaltslights.status = [on,off]
tel.perypheries.domefaltslights.encoder 

# instrument

tel.instrument.status = [ready,done,exposing]
tel.instruments.filter.status = [moving,ready]
tel.instruments.filter = [V,I]
tel.instrument.dit 
tel.instrument.ccd_temp
tel.instrument.telemetry
tel.instrument.subraster
tel.instrument.bin_x
tel.instrument.bin_y
tel.instrument.mode [fast,slow]

# current object
tel.object.id
tel.object.ra
tel.object.dec
tel.object.sequence
tel.object.source = [manual,plan]

# next object
tel.next_object.id
tel.next_object.ra
tel.next_object.dec
tel.next_object.sequence
tel.object.source = [manual,plan]

# Program

tel.plan.id = unikalny identyfikator do porownywania wersji planu
tel.plan.curent_i
tel.plan.next_i 

tel.plan.object.id = unikalny identyfikator obiektu
tel.plan.object.sequence = {ra,dec,sequence}
sequence = ndit * (filter,exp,ndit)
tel.plan.object.flags = [guiding]
tel.plan.object.flags = [ok,not_ready,not_exec,done,special]





TCS <=> TIC <=> TOI

TIC <- manual
TIC <- program  


toi.py 
- Monitor do sygnalow i komunikacji z AutoSlew 
- GUI
tel_gui.py - nic ciekawego, ale tylko tutaj jest EXIT
mnt_gui.py - Mount Controll - uzywa Monitora
pery_gui.py - sterowanie peryferiami - swiatla, M3, etc. 
instrument_gui.py - instrument Window
plan_gui - Plan Manager


*** Master Okno ***
* polaczyc ze SkyView?
* dodac zakladki z teleskopami
* dodac odpalanie Mount/instrument plan controler
* wyswietlanie innych teleskopow?


*** PLAN WIDGET ***
* Zintegrowac z TIC - synchornizacja planow, next object i logow obserwacyjnych
* przemyslec jak kontrolowac alerty - oddzielne okno z zaznaczaniem  - focu calibration 2000s, etc. ??
* pamietac o ob_id i plan_id
* co wyslwietlac w tabelce - ikonki, nazwa, uwagi, H, Az, seq, tot_exp, obs_id
* dodac sprawdzanie parametrow obserwacji

- doadc przycicsk i wiedget _plot night plan_
- w tabelce wyswietlac LOG z obserwacji z mozliwoscia edytowania
- _LoadPlan_ -> wczytywac zgodnie z formatem plikow - synchronizacja z TIC
- _stop_ i _start_ -> TIC odpala automat obserwacyjny 
- _next_ _skip_ i _stop_ zmienic ikonki i przemyslec

- _del all_ - nieaktywne
- _del_ _up_ _down_ _first_ _last_ _swap_ - READY, ale zamienic first i last z up i down

- _add_ - dodac caly widget z mozliwoscia dodania katalogu, obiektu, markerow...
- _edit_ - widget do edytowania paramatrow programu (exp time, etc.)

*** SKY VIEW ***
* dwa mody - wybieranie z planu obiektow / free mode
* interakcja SKY <-->  plan controler / tel controler
* wyswietlanie ut, sid, jd, programu, tel status, dome status, mirror covers, lights, flatfiled lights
* dodac ksiezyc, slonce, (planety?)

*** MOUNT + PERYPHERICAL ***
* polaczyc dwa okna
- dodac _fans_ on off / power
- dodac DomeFlat light / power
- dodac Park Dome

*** INSTRUMENT CONTROLL ***
* zrobic nadwidget z tabami do roznych instrumentow? 
* ostrzezewnie jak nie jest M3 skierowane na instrument
* Mode - zdefiniowac plik? 
* Subraster - pliki z definicjami wspolrzednych

*** OKNO GUIDERA ***
* nie ma - nie ma, nie wiem jak dzialac i synchronizowac
